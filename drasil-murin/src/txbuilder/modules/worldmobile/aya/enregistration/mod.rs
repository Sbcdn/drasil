use cardano_serialization_lib::{
    crypto::Ed25519KeyHash,
    utils::{to_bignum, BigInt, BigNum},
    AssetName,
};
use lazy_static::lazy_static;
use serde::{Deserialize, Serialize};

use error::TransactionBuildingError;
pub mod admin;
pub mod error;
pub mod register;
pub mod unregister;
//
lazy_static! {
    pub static ref ENREGCONTRACT: String =
        // First Small Testnet
            //std::env::var("ENREG_CONTRACT").unwrap_or_else(|_| "59085059084d010000332323232332232323233223232323322323233223232323232323232232322323232323223223232533532323232533350021350042233015350032235002222222222222004001132350052235006222232322333573466e1cc8c00c004ccd54c0904800488cd54c0a4480048d400488cd540e8008cd54c0b0480048d400488cd540f4008ccd40048cc1012000001223304100200123304000148000004cd54c0a4480048d400488cd540e8008ccd40048cd54c0b4480048d400488cd540f8008d540bc00400488ccd5540a00bc0080048cd54c0b4480048d400488cd540f8008d540b8004004ccd55408c0a800800540d0cc078c07cd402888888888888802c029200202a02932001355036223350014800088d4008894cd4ccd5cd19b8f00200d02e02d130070011300600332001355035223350014800088d4008894cd4ccd5cd19b8f00200702d02c1001130060033500122002132350042222253353301935006222222222222004001153353301a301b3500622222222222200b0061026221027102535001220023333573466e1cd55cea802a4000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd40bc0c0d5d0a80619a8178181aba1500b33502f03135742a0146ae854024d5d0a8041aba1500735742a00c6ae854014cd40bdd71aba15004333550362001200135742a0066ae854008d5d09aba2500223263203533573806a07406626ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aab9e5001137540026ae854014d5d09aba2500523263202733573804e05804a6666ae68cdc3a803240084244400646666ae68cdc3a803a40044244400246666ae68cdc3a8042400042444004464c6405066ae700a00b4098094090cccd5cd19b8735573aa01690001199999111109199998008030028020018011bae35742a0166eb8d5d0a8051bae35742a0126eb8d5d0a8041bae357426ae8940208c98c8094cd5ce0128150119999ab9a3370e6aae7540352000233221233001003002375c6ae854034dd71aba135744a01a464c6404866ae700900a408840a04c98c808ccd5ce2490350543500028135573ca00226ea80044d55ce9baa001135744a00226ae8940044d5d1280089aab9e50011375400226aae7940044dd500091299a999aa98038900099a80411299a801108018800a8099299a999ab9a3371e00400202001e26a02a0022a02800442020201c446a002444444444444666aa602824002446a00444446a0084466a00440104a66a666ae68cdc780080b811811099a816003004080428120051299a999aa980309000911a801111a80091111a8021119a8011005119a810005805280b0008980124c4426a004446a00244446a0084466a0044601a931299a80508009109807a4c464c6402466ae71241076f776e4861736800017111222333553006120015015335530091200123500122335501a00235500b001333553006120012235002225335333553008120013233500a223335003220020020013500122001123300122533500210131001010235001223300a00200500610031335019004003501600133553009120012350012232335501b00330010053200135501d225335001135500c003221350022253353300c002008112223300200a0041300600300232001355016221122253350011350032200122133350052200230040023335530071200100500400112212330010030023200135501422112225335001100222133005002333553007120010050040011121222300300411212223001004320013550112211225335001150112213350123004002335530061200100400122333573466e3c00800401000c48800848800448c88c008dd6000990009aa807111999aab9f0012500d233500c30043574200460066ae880080388c8c8cccd5cd19b8735573aa00490001199109198008018011aba150023005357426ae8940088c98c8024cd5ce00480700389aab9e5001137540024646464646666ae68cdc39aab9d5004480008cccc888848cccc00401401000c008c8c8c8cccd5cd19b8735573aa00490001199109198008018011919191999ab9a3370ea002900111909118008019bae357426aae79400c8cccd5cd19b875002480008c8488c00800cdd71aba135573ca008464c6402666ae7004c0600440404d55cea80089baa00135742a0046ae84d5d1280111931900719ab9c00e01300c135573ca00226ea8004d5d0a802199aa805bae335500b75ceb4d5d0a8019919191999ab9a3370ea0029002119091118010021aba135573ca00646666ae68cdc3a80124004464244460020086eb8d5d09aab9e500423333573466e1d400d20002122200323263201033573802002a01c01a01826aae7540044dd50009aba150023232323333573466e1d4005200023500c375c6ae84d55cf280191999ab9a3370ea00490011280611931900799ab9c00f01400d00c135573aa00226ea8004d5d09aba2500223263200a33573801401e01026ae8940044d5d1280089aab9e5001137540022424460040062244002932490350543100112232230023756002640026aa01044646666aae7c008940208cd401ccd54024c018d55cea80118029aab9e500230043574400601226ae840044488008488488cc00401000c448848cc00400c0084800488cdc000100088919180080091198019801001000a6015cd8799f58383535653961393733376635656533663361303461383062356263393431396338373732343138373331386264376163333736313431653130581c167d64052f9408816b9684b964befffb0b2c49132fb6e30097c12e81ff0001".to_string() );
        // Public Testnet
            //std::env::var("ENREG_CONTRACT").unwrap_or_else(|_| "59098159097e0100003323233223232323232323232323233223233223232323232323232232322323232323223223232533532323232533350021350042233015350032235002222222222222004001102a135003222225335330183500622350022222222222220040011301a35006223500222222222222200a102f3333573466e1cd55cea802a4000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd4090094d5d0a80619a8120129aba1500b33502402635742a014666aa050eb9409cd5d0a804999aa8143ae502735742a01066a0480626ae85401cccd540a00c9d69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40f1d69aba15002303d357426ae8940088c98c80fccd5ce02101f81e89aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a81e3ad35742a004607a6ae84d5d1280111931901f99ab9c04203f03d135573ca00226ea8004d5d09aba2500223263203b33573807c07607226aae7940044dd50009aba1500533502475c6ae854010ccd540a00b88004d5d0a801999aa8143ae200135742a00460606ae84d5d1280111931901b99ab9c03a037035135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00a60406ae84d5d1280291931901499ab9c02c0290273333573466e1d401920042122200323333573466e1d401d20022122200123333573466e1d402120002122200223263202a33573805a05405004e04c6666ae68cdc39aab9d500b480008ccccc8888848ccccc00401801401000c008dd71aba1500b375c6ae854028dd71aba15009375c6ae854020dd71aba135744a010464c6404e66ae700a809c094cccd5cd19b8735573aa01a90001199109198008018011bae35742a01a6eb8d5d09aba2500d23263202633573805204c048204a264c6404a66ae7124010350543500025135573ca00226ea80044d55ce9baa001135744a00226ae8940044d5d1280089aab9e50011375400226aae7940044dd500091299a999aa98018900099091980091299a80110801880080128069299a999ab9a3371e00400203603426a01e0022a01c004420362032640026aa0324422444a66a00226a00644002442666a00a440046008004666aa600e2400200a008002640026aa03044a66a00220304426a00444446a0084466a0044601601040402464460046eb0004c8004d5406088cccd55cf80092805119a80498021aba100230033574400402c464646666ae68cdc39aab9d5002480008cc8848cc00400c008c038d5d0a80118029aba135744a004464c6402c66ae700640580504d55cf280089baa0012323232323333573466e1cd55cea8022400046666444424666600200a0080060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008c05cd5d0a80119a80780b1aba135744a004464c6403666ae7007806c0644d55cf280089baa00135742a008666aa010eb9401cd5d0a8019919191999ab9a3370ea0029002119091118010021aba135573ca00646666ae68cdc3a80124004464244460020086eb8d5d09aab9e500423333573466e1d400d20002122200323263201d33573804003a03603403226aae7540044dd50009aba1500233500b75c6ae84d5d1280111931900b99ab9c01a017015135744a00226ae8940044d55cf280089baa0011335500175ceb44488c88c008dd5800990009aa80a91191999aab9f00225008233500733221233001003002300635573aa004600a6aae794008c010d5d100180a09aba100111220021221223300100400312232323333573466e1d400520002350073005357426aae79400c8cccd5cd19b875002480089401c8c98c8048cd5ce00a80900800789aab9d5001137540022424460040062244002464646666ae68cdc3a800a400c46424444600800a600e6ae84d55cf280191999ab9a3370ea004900211909111180100298049aba135573ca00846666ae68cdc3a801a400446424444600200a600e6ae84d55cf280291999ab9a3370ea00890001190911118018029bae357426aae7940188c98c8040cd5ce00980800700680600589aab9d500113754002464646666ae68cdc39aab9d5002480008cc8848cc00400c008c014d5d0a8011bad357426ae8940088c98c8030cd5ce00780600509aab9e5001137540024646666ae68cdc39aab9d5001480008dd71aba135573ca004464c6401466ae700340280204dd5000919191919191999ab9a3370ea002900610911111100191999ab9a3370ea004900510911111100211999ab9a3370ea00690041199109111111198008048041bae35742a00a6eb4d5d09aba2500523333573466e1d40112006233221222222233002009008375c6ae85401cdd71aba135744a00e46666ae68cdc3a802a400846644244444446600c01201060186ae854024dd71aba135744a01246666ae68cdc3a8032400446424444444600e010601a6ae84d55cf280591999ab9a3370ea00e900011909111111180280418071aba135573ca018464c6402666ae7005804c04404003c03803403002c4d55cea80209aab9e5003135573ca00426aae7940044dd50009191919191999ab9a3370ea002900111999110911998008028020019bad35742a0086eb4d5d0a8019bad357426ae89400c8cccd5cd19b875002480008c8488c00800cc020d5d09aab9e500623263200c33573801e01801401226aae75400c4d5d1280089aab9e500113754002464646666ae68cdc3a800a400446424460020066eb8d5d09aab9e500323333573466e1d400920002321223002003375c6ae84d55cf280211931900499ab9c00c009007006135573aa00226ea8004488c8c8cccd5cd19b87500148010848880048cccd5cd19b875002480088c84888c00c010c018d5d09aab9e500423333573466e1d400d20002122200223263200a33573801a01401000e00c26aae7540044dd50009191999ab9a3370ea0029001100391999ab9a3370ea0049000100391931900319ab9c009006004003135573a6ea800526120011220021220014910350543100112323001001223300330020020014c15cd8799f58386438626562636230616264383931393338373463353965643330323366356234663831623839623636373664313837616437666264623065581c167d64052f9408816b9684b964befffb0b2c49132fb6e30097c12e81ff0001".to_string() );
        // Private Testnet
            //std::env::var("ENREG_CONTRACT").unwrap_or_else(|_| "59098159097e0100003323233223232323232323232323233223233223232323232323232232322323232323223223232533532323232533350021350042233015350032235002222222222222004001102a135003222225335330183500622350022222222222220040011301a35006223500222222222222200a102f3333573466e1cd55cea802a4000466442466002006004646464646464646464646464646666ae68cdc39aab9d500c480008cccccccccccc88888888888848cccccccccccc00403403002c02802402001c01801401000c008cd4090094d5d0a80619a8120129aba1500b33502402635742a014666aa050eb9409cd5d0a804999aa8143ae502735742a01066a0480626ae85401cccd540a00c9d69aba150063232323333573466e1cd55cea801240004664424660020060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008cd40f1d69aba15002303d357426ae8940088c98c80fccd5ce02101f81e89aab9e5001137540026ae854008c8c8c8cccd5cd19b8735573aa004900011991091980080180119a81e3ad35742a004607a6ae84d5d1280111931901f99ab9c04203f03d135573ca00226ea8004d5d09aba2500223263203b33573807c07607226aae7940044dd50009aba1500533502475c6ae854010ccd540a00b88004d5d0a801999aa8143ae200135742a00460606ae84d5d1280111931901b99ab9c03a037035135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d5d1280089aba25001135744a00226ae8940044d55cf280089baa00135742a00a60406ae84d5d1280291931901499ab9c02c0290273333573466e1d401920042122200323333573466e1d401d20022122200123333573466e1d402120002122200223263202a33573805a05405004e04c6666ae68cdc39aab9d500b480008ccccc8888848ccccc00401801401000c008dd71aba1500b375c6ae854028dd71aba15009375c6ae854020dd71aba135744a010464c6404e66ae700a809c094cccd5cd19b8735573aa01a90001199109198008018011bae35742a01a6eb8d5d09aba2500d23263202633573805204c048204a264c6404a66ae7124010350543500025135573ca00226ea80044d55ce9baa001135744a00226ae8940044d5d1280089aab9e50011375400226aae7940044dd500091299a999aa98018900099091980091299a80110801880080128069299a999ab9a3371e00400203603426a01e0022a01c004420362032640026aa0324422444a66a00226a00644002442666a00a440046008004666aa600e2400200a008002640026aa03044a66a00220304426a00444446a0084466a0044601601040402464460046eb0004c8004d5406088cccd55cf80092805119a80498021aba100230033574400402c464646666ae68cdc39aab9d5002480008cc8848cc00400c008c038d5d0a80118029aba135744a004464c6402c66ae700640580504d55cf280089baa0012323232323333573466e1cd55cea8022400046666444424666600200a0080060046464646666ae68cdc39aab9d5002480008cc8848cc00400c008c05cd5d0a80119a80780b1aba135744a004464c6403666ae7007806c0644d55cf280089baa00135742a008666aa010eb9401cd5d0a8019919191999ab9a3370ea0029002119091118010021aba135573ca00646666ae68cdc3a80124004464244460020086eb8d5d09aab9e500423333573466e1d400d20002122200323263201d33573804003a03603403226aae7540044dd50009aba1500233500b75c6ae84d5d1280111931900b99ab9c01a017015135744a00226ae8940044d55cf280089baa0011335500175ceb44488c88c008dd5800990009aa80a91191999aab9f00225008233500733221233001003002300635573aa004600a6aae794008c010d5d100180a09aba100111220021221223300100400312232323333573466e1d400520002350073005357426aae79400c8cccd5cd19b875002480089401c8c98c8048cd5ce00a80900800789aab9d5001137540022424460040062244002464646666ae68cdc3a800a400c46424444600800a600e6ae84d55cf280191999ab9a3370ea004900211909111180100298049aba135573ca00846666ae68cdc3a801a400446424444600200a600e6ae84d55cf280291999ab9a3370ea00890001190911118018029bae357426aae7940188c98c8040cd5ce00980800700680600589aab9d500113754002464646666ae68cdc39aab9d5002480008cc8848cc00400c008c014d5d0a8011bad357426ae8940088c98c8030cd5ce00780600509aab9e5001137540024646666ae68cdc39aab9d5001480008dd71aba135573ca004464c6401466ae700340280204dd5000919191919191999ab9a3370ea002900610911111100191999ab9a3370ea004900510911111100211999ab9a3370ea00690041199109111111198008048041bae35742a00a6eb4d5d09aba2500523333573466e1d40112006233221222222233002009008375c6ae85401cdd71aba135744a00e46666ae68cdc3a802a400846644244444446600c01201060186ae854024dd71aba135744a01246666ae68cdc3a8032400446424444444600e010601a6ae84d55cf280591999ab9a3370ea00e900011909111111180280418071aba135573ca018464c6402666ae7005804c04404003c03803403002c4d55cea80209aab9e5003135573ca00426aae7940044dd50009191919191999ab9a3370ea002900111999110911998008028020019bad35742a0086eb4d5d0a8019bad357426ae89400c8cccd5cd19b875002480008c8488c00800cc020d5d09aab9e500623263200c33573801e01801401226aae75400c4d5d1280089aab9e500113754002464646666ae68cdc3a800a400446424460020066eb8d5d09aab9e500323333573466e1d400920002321223002003375c6ae84d55cf280211931900499ab9c00c009007006135573aa00226ea8004488c8c8cccd5cd19b87500148010848880048cccd5cd19b875002480088c84888c00c010c018d5d09aab9e500423333573466e1d400d20002122200223263200a33573801a01401000e00c26aae7540044dd50009191999ab9a3370ea0029001100391999ab9a3370ea0049000100391931900319ab9c009006004003135573a6ea800526120011220021220014910350543100112323001001223300330020020014c15cd8799f58383464616435653538363166623430363164636634623466363839333566326562366466626635366564376165636430333630656261643432581cecb38c2114d95b9923b6b15e310c215b7c0744f6357b72c6f3c20823ff0001".to_string());
            std::env::var("ENREG_CONTRACT").unwrap_or_else(|_| "".to_string());
    pub static ref ENNFT_POLICY: String =
        std::env::var("ENNFT_POLICY").unwrap_or_else(|_| "".to_string());
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq, Eq)]
pub struct RegistrationDatum {
    pub validator_address: Vec<u8>,
    pub operator_address: Vec<u8>,
    pub moniker: Vec<u8>,
    pub enUsedNftTn: AssetName,
    pub enOwner: Ed25519KeyHash,
}

#[derive(Serialize, Deserialize, Debug, Clone, PartialEq, Eq)]
pub struct ElmConfig {
    pub validator_address: String,
    pub operator_address: String,
    pub moniker: String,
}

pub enum RegistrationRedeemer {
    Register,
    Unregister,
    Admin,
}

impl RegistrationRedeemer {
    pub fn redeemer(&self) -> BigNum {
        match &self {
            RegistrationRedeemer::Register => to_bignum(0),
            RegistrationRedeemer::Unregister => to_bignum(1),
            RegistrationRedeemer::Admin => to_bignum(2),
        }
    }
}

pub fn restore_wmreg_datum(bytes: &[u8]) -> Result<RegistrationDatum, TransactionBuildingError> {
    let datum = cardano_serialization_lib::plutus::PlutusData::from_bytes(bytes.to_vec())
        .expect("Could not deserialize PlutusData");
    log::debug!("Restored PlutusData: {:?}", datum);
    let d_str = datum
        .to_json(cardano_serialization_lib::plutus::PlutusDatumSchema::DetailedSchema)
        .expect("Could not transform PlutusData to JSON");
    log::info!("Restored PlutusData Str: {:?}", d_str);
    let d_svalue = serde_json::from_str::<serde_json::Value>(&d_str)
        .expect("Could not transform PlutusDataJson to serde_json::Value");
    log::debug!("Deserialized Datum: \n{:?}", &d_str);
    let fields = d_svalue.get("fields").unwrap().as_array().unwrap();
    let operator_address = hex::decode(
        fields[0]
            .as_object()
            .unwrap()
            .get("bytes")
            .unwrap()
            .as_str()
            .unwrap(),
    )
    .unwrap();
    let validator_address = hex::decode(
        fields[1]
            .as_object()
            .unwrap()
            .get("bytes")
            .unwrap()
            .as_str()
            .unwrap(),
    )
    .unwrap();
    let moniker = hex::decode(
        fields[2]
            .as_object()
            .unwrap()
            .get("bytes")
            .unwrap()
            .as_str()
            .unwrap(),
    )
    .unwrap();
    let enUsedNftTn = AssetName::new(
        hex::decode(
            fields[3]
                .as_object()
                .unwrap()
                .get("bytes")
                .unwrap()
                .as_str()
                .unwrap(),
        )
        .unwrap(),
    )
    .unwrap();

    let enOwner = Ed25519KeyHash::from_bytes(
        hex::decode(
            fields[4]
                .as_object()
                .unwrap()
                .get("bytes")
                .unwrap()
                .as_str()
                .unwrap(),
        )
        .unwrap(),
    )
    .unwrap();

    Ok(RegistrationDatum {
        operator_address,
        validator_address,
        moniker,
        enUsedNftTn,
        enOwner,
    })
}
