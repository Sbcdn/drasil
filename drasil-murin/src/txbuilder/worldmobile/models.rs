//! This module defines the data structures for transactions
//!

use cardano_serialization_lib::{
    address::Address, crypto::Ed25519KeyHash, AssetName, TransactionInputs,
};
use serde::{Deserialize, Serialize};

/// This type represents the staking transaction data.
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct StakeTxData {
    /// The staking amount.
    pub staking_amount: u64,
    /// The transaction datum
    pub registration_datum: RegistrationDatum,
    /// Wallet address.
    pub wallet_addr: Address,

    /// This is the registration UTXO for reference.
    /// This UTXO is not spent.
    pub registration_utxos: TransactionInputs,
}

/// This type represents the registration datum.
#[derive(Serialize, Deserialize, Debug, Clone, PartialEq, Eq)]
pub struct RegistrationDatum {
    /// This is the EN operator on Aya address.
    pub en_operator_address: Vec<u8>,
    /// This is the address of the validator node itself.
    pub en_consensus_pubkey: Vec<u8>,
    /// This is a tree generated by the individual EN for each epoch.
    pub en_merkle_tree_root: Vec<u8>,
    /// This is the cardano cross chain event address.
    pub en_cce_address: Vec<u8>,
    /// This the Earth Node NFT that allows to operate an EN.
    pub en_used_nft_tn: AssetName,
    /// This is the owner wallet pub key.
    pub en_owner: Ed25519KeyHash,
}
